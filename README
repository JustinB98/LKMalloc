.
├── Makefile
├── README
├── include/
│   ├── binary_tree.h
│   ├── linked_list.h
│   ├── lk_data.h
│   ├── lk_record.h
│   └── lkmalloc.h
├── src/
│   ├── binary_tree.c
│   ├── demo.c
│   ├── linked_list.c
│   ├── lk_data.c
│   ├── lk_record.c
│   └── lkmalloc.c
└── test/
    ├── Makefile
    ├── include/
    │   ├── lkmalloc.h
    │   └── test_utils.h
    ├── lib/
    │   └── lkmalloc.a
    ├── shell_tests/
    │   ├── assert_exit_code.sh
    │   ├── assert_successful_exit.sh
    │   ├── assert_unsuccessful_exit.sh
    │   ├── ec_tests/
    │   │   ├── test05.sh
    │   │   └── test06.sh
    │   ├── finish.sh
    │   └── reg_tests/
    │       ├── test01.sh
    │       ├── test02.sh
    │       ├── test03.sh
    │       └── test04.sh
    └── src/
        ├── alloc_with_flags_and_modify.c
        ├── assert_approx_free.c
        ├── assert_memory_block.c
        ├── assert_orphan_free.c
        ├── assert_valid_lkfree_flags.c
        ├── assert_valid_lkmalloc_flags.c
        ├── assert_valid_lkreport_flags.c
        ├── double_free_test.c
        ├── shift_and_free.c
        └── stress_test.c

## Project structure:

* include - lkmalloc headers. lkmalloc.h is the only one that will be exported
  * binary_tree.h - Binary tree header. Very basic implementation
  * linked_list.h - Specialized implementation of a linked list
  * lk_data.h - Contains functions to insert and get records
  * lk_record.h - Contains struct definition of a record
  * lkmalloc.h - Contains defines for flags and macros to call the internal lkmalloc functions
* src - lkmalloc source files
  * binary_tree.c - Binary tree implementation (not red-black, just a basic one)
  * linked_list.c - Linked list implementation with O(1) insertion (more on that later)
  * lk_data.c - An interface for using the data structures
  * lk_record.c - Getters and setters for the record struct (struct is located in the header)
  * lkmalloc.c - The implementation which deals with calling lk_data.c, malloc, free, mmap, and munmap
* test - A test enviroment
  * lib - Where lkmalloc.a will reside
  * shell_tests - Contains shell tests that will execute the c code (source in test/src, exe in test/bin)
    * reg_tests - Tests for regular program
	  * test01.sh - Tests lkmalloc
	  * test02.sh - Tests lkfree
	  * test03.sh - Tests lkreport
	  * test04.sh - Tests argument validation to each function
	* ec_tests - Tests for extra credit program
	  * test05.sh - Asserts segfaults happen with accessing PROT_NONE protection. Also with complex flags.
	  * test06.sh - Tests argument validation for the EXTRA_CREDIT flags
  * src - Contains source c code for testing. These programs take command line arguments to modify behavior of the tests
    * alloc_with_flags_and_modify.c - Takes size to malloc, malloc flags, free flags and buffer offset
	  * Creates a malloc with specified size and flags, modifies a single char at buf + offset. Useful for LKM_PROT_AFTER and LKM_PROT_BEFORE
	* assert_approx_free.c - Takes number of frees to perform LKF_APPROX
	  * Basically mallocs a ptr, advance the buffer, then free using LKF_APPROX. Does this "free" amount of times. Tests the reports generated using LKR_APPROX. If successful, program exits with 0, 1 otherwise.
	* assert_memory_block - Takes size to malloc, malloc flags, offset, byte and len
	  * Mallocs a ptr of size "size" with "malloc flags". Then asserts each byte from [ptr + offset, ptr + offset + len) is equal to "byte". Useful for LKM_UNDER and LKM_OVER.
	* assert_orphan_free.c - Takes amount of times to free
	  * Just tries to free NULL "free" amount of times. Then asserts that lkreport returns "free" amount of reports when given the LKR_ORPHAN_FREE flag.
	* assert_valid_lkfree_flags.c - Takes free_flags and assert_success
	  * Allocates some memory using lkmalloc with LKM_REG flag. Then tries to free with arguments.
	    * If assert_success is 0, then an assert_fail will be performed and exit with 0 if lkfree returned with -EINVAL.
		* If assert_success is non-zero, then an assert_success will be performed and exit with 0 if lkfree did not return with -EINVAL.
	* assert_valid_lkmalloc_flags.c - Takes size to malloc, malloc flags and assert_success
	  * Does the same as assert_valid_lkfree_flags.c except for lkmalloc and the size for the malloc request is taken. Assert_success means the same here as it did with assert_valid_lkfree_flags.
	* assert_valid_lkreport_flags.c - Takes report flags and assert_success
	  * Does the exact same thing as assert_valid_lkfree_flags except with lkreport
	* double_free_test.c - Takes times_to_free
	  * Mallocs a pointer then tries to free it "times_to_free" amount of times. Then checks the reports generated by lkreport with the LKR_DOUBLE_FREE flag.
	    * If times_to_free is 1, then the records printed is asserted to be 0, since 1 free will create a match. No double frees
		* If times_to_free is greater than 1, then there should be "times_to_free" amount of records. "times_to_free" - 1 free records and 1 malloc record (malloc records affected by double free will be printed)
	* shift_and_free.c - Takes malloc_flags, free_flags and offset
	  * Mallocs a pointer using lkmalloc with "malloc_flags" and tries to free the pointer offsetted by "offset" with "free_flags" passed into lkfree.
	* stress_test.c - Takes size (size should be a multiple of 4)
	  1. Mallocs a block of memory of size * sizeof(size_t *) to be used as an array. Then mallocs a size_t* type to each block of this new memory (basically creating a size_t* array).
	  2. Separates each block into quarters and frees the second one, then the last one, then the third one, then the first one. This will test the underlying data structure.
